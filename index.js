class stringCaseChange {
    // Function to convert string to lowercase
    static toLowerCase(str) {
        return str.toLowerCase();
    }

    // Function to convert string to uppercase
    static toUpperCase(str) {
        str = this.toLowerCase(str); // Convert to lowercase first
        return str.toUpperCase();
    }

    // Function to convert string to title case
    static toTitleCase(str) {
        str = this.toLowerCase(str); // Convert to lowercase first
        return str.replace(/\b\w/g, function (char) {
            return char.toUpperCase();
        });
    }

    // Function to convert string to sentence case
    static toSentenceCase(str) {
        str = this.toLowerCase(str); // Convert to lowercase first
        return str.charAt(0).toUpperCase() + str.slice(1);
    }

    // Function to convert string to camel case
    static toCamelCase(str) {
        str = this.toLowerCase(str); // Convert to lowercase first
        return str.replace(/\s(.)/g, function ($1) {
            return $1.toUpperCase();
        }).replace(/\s/g, '').replace(/^(.)/, function ($1) {
            return $1.toLowerCase();
        });
    }

    // Function to convert string to snake case
    static toSnakeCase(str) {
        str = this.toLowerCase(str); // Convert to lowercase first
        return str.replace(/\s/g, '_');
    }

    // Function to convert string to kebab case
    static toKebabCase(str) {
        str = this.toLowerCase(str); // Convert to lowercase first
        return str.replace(/\s/g, '-');
    }

    // Function to convert string to pascal case
    static toPascalCase(str) {
        str = this.toLowerCase(str); // Convert to lowercase first
        return str.replace(/\w+/g, function (w) {
            return w[0].toUpperCase() + w.slice(1).toLowerCase();
        }).replace(/\s/g, '');
    }

    // Function to convert string to constant case (UPPERCASE_SNAKE_CASE)
    static toConstantCase(str) {
        str = this.toLowerCase(str); // Convert to lowercase first
        return str.replace(/\s/g, '_').toUpperCase();
    }

    // Function to convert string to dot case (lowercase.dot.case)
    static toDotCase(str) {
        str = this.toLowerCase(str); // Convert to lowercase first
        return str.replace(/\s/g, '.');
    }

    // Function to convert string to path case (lowercase/path/case)
    static toPathCase(str) {
        str = this.toLowerCase(str); // Convert to lowercase first
        return str.replace(/\s/g, '/');
    }

    static toAlternatingCase(str) {
        return str.split('').map((char, index) => index % 2 === 0 ? char.toUpperCase() : char.toLowerCase()).join('');
    }

    // Function to convert string to inverted case
    static toInvertedCase(str) {
        return str.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).join('');
    }

    // Function to convert string to sponge case
    static toSpongeCase(str) {
        return str.split('').map(char => Math.random() < 0.5 ? char.toUpperCase() : char.toLowerCase()).join('');
    }

    // Function to convert string to reverse case
    static toReverseCase(str) {
        return str.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase()).reverse().join('');
    }

    // Function to convert string to small caps
    static toSmallCaps(str) {
        return str.split('').map(char => char === char.toUpperCase() ? char.toLowerCase() : char).join('');
    }

    // Function to convert string to mirrored case
    static toMirroredCase(str) {
        const mirroredChars = {
            a: '…ê',
            b: 'q',
            c: '…î',
            d: 'p',
            e: '«ù',
            f: '…ü',
            g: '∆É',
            h: '…•',
            i: '·¥â',
            j: '…æ',
            k: ' û',
            l: 'l',
            m: '…Ø',
            n: 'u',
            o: 'o',
            p: 'd',
            q: 'b',
            r: '…π',
            s: 's',
            t: ' á',
            u: 'n',
            v: ' å',
            w: ' ç',
            x: 'x',
            y: ' é',
            z: 'z',
            A: '‚àÄ',
            B: 'êêí',
            C: '∆Ü',
            D: '·ó°',
            E: '∆é',
            F: '‚Ñ≤',
            G: '‚ÖÅ',
            H: 'H',
            I: 'I',
            J: '≈ø',
            K: '‚ãä',
            L: '‚ÖÇ',
            M: 'W',
            N: 'N',
            O: 'O',
            P: '‘Ä',
            Q: 'Œå',
            R: '·¥ö',
            S: 'S',
            T: '‚ä•',
            U: '‚à©',
            V: '·¥ß',
            W: 'M',
            X: 'X',
            Y: '‚ÖÑ',
            Z: 'Z',
            '0': '0',
            '1': '∆ñ',
            '2': '·ÑÖ',
            '3': '∆ê',
            '4': '„Ñ£',
            '5': 'œõ',
            '6': '9',
            '7': '„Ñ•',
            '8': '8',
            '9': '6',
            '?': '¬ø',
            '!': '¬°',
            '.': 'Àô',
            ',': "'",
            "'": ',',
            '"': ',,',
            '`': ',',
            '(': ')',
            ')': '(',
            '[': ']',
            ']': '[',
            '{': '}',
            '}': '{',
            '<': '>',
            '>': '<',
            '<': '>',
            '>': '<'
        };
        return str.split('').map(char => mirroredChars[char] ? mirroredChars[char] : char).reverse().join('');
    }
}

// Exporting the class
module.exports = stringCaseChange;
